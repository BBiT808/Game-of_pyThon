services:
  jupyterlab1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jupyterlab
    hostname: JUPYTERLAB
    command: /bin/bash -c "service ssh start && python3 -m jupyterlab --ip=0.0.0.0 --port=8888 --allow-root --FileContentsManager.delete_to_trash=False"
    ports:
      - '8889:8888' # jupyterlab 기본 웹포트 8888 !
      - '22:22' # ssh 기본 포트
    volumes:
      - D:\keh\code:/home/pkdata/pkdata   ## 이렇게 해주면 나중에 docker에서 volumes에 따로 저장이 됨 ! ; 도커볼륨과 컨테이너 내부의 저장공간 연결 !!
    networks:
      - db_net  # 내부와 통신이 가능하도록 db_net의 이름으로 도커네트워크 설정 !!

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - '3306:3306' #mysql 기본 포트
    command: mysqld
    environment:
      MYSQL_ROOT_PASSWORD: "1234" # 환경변수로 기본 루트 비밀번호 지정 : 1234
    networks:
      - db_net  # 내부와 통신이 가능하도록 db_net의 이름으로 도커네트워크 설정 !!
    volumes:
      - mysql_data:/var/lib/mysql # 도커 볼륨과 컨테이너 내부 저장공간 연결 설정 ; mysql 데이터 저장소 !
      - mysql_conf:/etc/mysql/mysql.conf.d/ # mysql 설정파일 저장소 !

  mongodb:
    image: mongodb/mongodb-community-server:8.0.3-ubi8
    container_name: mongodb
    hostname: mongodb
    ports:
      - '27017:27017'  # MongoDB 기본 포트 !
    networks:
      - db_net # 내부와 통신이 가능하도록 db_net의 이름으로 도커네트워크 설정 !!
    volumes:
      - mongodb_data:/var/lib/mongodb # MongoDB 데이터 저장소 ! ; 만일 버전이 달라져서 저장소가 달라지면 거기에 맞춰서 넣어주면 됨 !!


  oracle-db:
    image: gvenzl/oracle-xe:21-slim
    container_name: oracle
    ports:
      - '1521:1521'  # Oracle DB 기본 포트 !
      - '5500:5500'  # 웹포트 매니저
    environment:
      ORACLE_PASSWORD: oracle
      APP_USER: pknu
      APP_USER_PASSWORD: "1234"
    networks:
      - db_net # 내부와 통신이 가능하도록 db_net의 이름으로 도커네트워크 설정 !!
    volumes:
      - oracle_data:/opt/oracle/oradata # Oracle DB 데이터 저장소 !

## 각 서버끼리 연동되게 하기 위해 네트워크 설정을 미리 해줌 !!
networks:
  db_net:
    driver: bridge

volumes:
  mysql_data:
  mysql_conf:
  mongodb_data:
  oracle_data:      